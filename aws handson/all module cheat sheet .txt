
-----------------------------------------------------------------------------------------------------------------------------------------
EFS - elastic file store                           # note - efs service not supported by windows ec2 , for windows fsx service used

steps - 
efs steps :-  create efs ---> add 'mount target' while creating efs
              efs-security group - add nfs rule 
              go to console --> select created efs --> attach --> copy " Using the NFS client: " command and paste in all ec2 
        
        
ec2 steps :-    install required ec2 in which we want to attach efs 
                in ec2-security group - add nfs rule
                install 'nfs' in ec2 
                create common folder for efs
                
command to check efs attach or not
# df -h 

command for installing nfs on different ec2 :-

ubuntu -       sudo apt install nfs-common

amazon linux - sudo yum -y install nfs-utils

redhat -        sudo yum -y install nfs-utils

-------------------------------------------------------------------------------------------------------------------------------------------       


Elastic load balancer:

classic load balancer - this is old one with limited functionality - 

  steps to create load balancer : 
      --> create load Balancers :
            - Create an internal load balancer - if not enabled -: means lb is public
                                                 if enabled --: means lb is not public 
                                                 
            - add list of ec2 : select here list of ec2 on which we want to distribute load
            - add security group with - http and https rule 
  
  
  
Application Load Balancer :

 steps - create load balancer :-
                - internet facing - used to access from internet /public access
                - internal - use to private access
                
                - select awailability zones in which ec2 are created           # note- for appln lb creation at least 2 az should be selected.
                - select security groups 
                
         ****   - add target group :-                                                # note for appln lb and network lb target group needed

  step for target group creation :- 
                - choose target type - instance 
                - register targets - select list of ec2 for which we want to make a group 
                
            
           
 --------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 AUTO SCALING GROUP 
                   
  asg creation steps - follow sequence while creating 
  
              1. AMI 
              2. Launch configuration or launch template -                  # in template we define os , instance type , ebs for server while auto scaling
              3. load balancer
              4. start creating asg
              5. cloud watch alarm
              6. scaling policy for asg
              
      
   Auto scaling group creation 
    step 1 :- 
        - select launch configuration 
        - select availability zone                                                         # az in which we want to add server while autoscaling
        - select Load balancer
        - *** group size -: 
                  - desired capacity                                                         # what are normal or average no of servers we want
                  - minimum capacity                                                         # min servers we want below this no of server will remove 
                  - maximum capacity                                                         # maximum servers we want beyond this no of server will add
            
            
    step 2 :- *** create policies                                                          # policies - in this we define actually when should add or remove server
    
    --> cloudwatch alarm creation --:
                              - create cloudwatch alarm --> select metric --> serch :- cpu --> ec2-by auto-scaling group --> select asg with cpu utilization metric
                              - conditions -: specifiy threshold /cpu utilization % and greater than , less than 
                              
    
    --> go to asg --> select created asg --> automatic scaling --> Dynamic scaling policies --> 
          - --> create dynamic policies --> step scaling --:
                                                      - choose cloud watch alarm 
                                                      - take a action - add :1                    # here we define add 1 server after alarm triggers
    
              
         
                
          
   Launch configuration creation 
        - Select AMI , instance type ,  keypair , security group --> create 
        
  
 ---------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 ROUTE - 53 
 
 steps -: to route traffic to single ec2
    
    step 1 :- 
      - create hosted zone for our dns 
      - change the default nameservers of dns 
                    -->  go to freenom --> service --> manage domains --> then our dns list comes --> manage domains 
                         ---> management tools --> name servers --> use custom name server --: paste here name server of created hosted zones
      
    step 2 :   
     - add record - : 
             - record name - www or subdomain names                                      # ex - www.images.prashantm.com    here "www.images" is subdomain
             - in that mention ip of ec2
             - select record type :  "A" and choose routing policies - simple
     
     
     
     
 steps to route traffic to load balancer :
        - create hosted zone for our dns 
        - add record :-
               - select record type :- A and 
               - alias - yes , and select dns name of load balancer
               - choose routing policy 
               
               
               
              
 routing policies :-  simple , failover , latency based , weighted 
 
      1 - simple routing -: 
              - create record for simple routing
              
      2 - failover routing - :
              - create health check for primary and secondory instance :
                      - want to monitor - select endpoint 
                      - ip of ec2 
                      
              - create record - 1st for primary instance - mention heath check of it , failover record type = primary
                              - 2nd for secondary instance- mention health check of secondary instance , failover record type = secondary
               
              - testing :- type domain name on browser , see primary instance web page comes or not, 
                           then stop primary instance then secondary ec2 web page comes or not
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
 
 VPC - Virtual Private Cloud
 
 steps -:
      - create vpc :- choose cidr for vpc
      - create subnets :- divide cidr among the subnets
      - create gateway - 
              - for public subnet - internet gate way , 
              - for private subnet - NAT gateway -: here we select public subnet which provide internet to private gateway
      - Route table -
            - create public route table - associate public subnet , route = 0.0.0.0/0 to internete Gateway
            - create private route table - associal private subnet , route = 0.0.0.0/0 to NAT Gateway
            
            
 -----------------------------------------------------------------------------------------------------------------------------------------------        
  
PRIVATE EC2 CREATION AND LOGGING IN IT VIA PUBLIC EC2 :-

step1 - 	create VPC 

step 2 -	create public and private subnet 

step3 - 	varil subnet la actually public and private banva

		a - create internet gateway  
		b - create nat gateway - 	hyamadhe only *public subnet add kara
					
					note - becoz apan public subnet kadun internet ghenar ani private subnet la denar ( pizza - brother - quarentine example)
	
		c - create public route table -  hyat subnet association madhe - public subnets add kara
		d- create private route table	- hyat subnet association madhe - private subnets add kara
    

steps for logging in private instance -
                                           
				- 1st login in public-ec2 
				- create file with keypair of pvt ec2 with .pem extension --------> then paste content of private server keypair ---> save it 
        - *** sudo chmod 400 <key-pair of private server >
        - enter the ssh command for private ec2


 
 ------------------------------------------------------------------------------------------------------------------------------------------------------
 
 VPC PEERING -
 
 imp note - for conncting two vpc by peering connection then these two vpc have different cidr notation 
 same cidr notation vpc will failed to peer
 
 task - Nvirginia region - vpc-1 ----> 1 public ec2
        oregon region - vpc-2 ---> 1 private ec2  
        
        we want to access private ec2 of vpc-2 on public ec2 of vpc-1 
        for that we want to make vpc peering connection of Nvirginia region - vpc-1  and oregon region - vpc-2
 
 vpc_peering steps -:
 
        step 1 :-
          - go to vpc --> peering connections --> 
          --->  create peering connection :
                  -  vpc requester -: jya vpc varti aplyala dusra vpc connect karaychay to vpc                          # in above task vpc-1 is requester
                  -  vpc accepter - : jo pan vpc aplyala access karaychay to vpc                                        # in above task vpc-2 is accepter
                  - create --> ok 
                 
        step 2 :- accept request from accepter vpc                                            # in above task vpc-2 is accepter then go to oregon region 
           - go to vpc --> peering connections --> 
            --->  create peering connection : 
                           - select created peering connection --> actions --> accept request 
 
 steps for accessing private ec2 of vpc-2 on public ec2 of vpc-1 
          
          step 1 :- edit route table of of Nvirgina vpc-1 
            - go to N-virginia reqion --> route table of public ec2 --> destination :- < cidr of vpc-2 >         target -: < vpc peering connection id >
                                                                  
          step 2 :- 
            - go to oregon region ---> route tables of private ec2 --> destination :- < cidr vpc -1 >           target -: < vpc peering connection id >
            
                                                         
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
      
