
NACL SECURITY - for adding security for subnet , here explicit deny is awailable

  steps to create nacl 
    - go to vpc --> security -: network acl's --> create network acl --> select vpc --> create
    - add allow and deny rules in inbound and outbound
    - select created nacl --> associate subnet 
    
    
    when NACL is beneficial - :
     let say when we have 100 server in 'us-east-1' subnet and these 100 severs have different security groups and now 
     we want to add some allow rules on these server then changing 100 servers security group is time consuming then we NACL



SECURITY GROUP :- 

HOW TO ALLOW TRAFFIC FROM SPECIFIC 2 ec2s IPS ONLY 

    --> inbound --:
	rule 1 -:  type - ssh  , source - custom : < enter ip of any ec2- 1 > /32 	      # note - in cidr /32 means only 1 host will create hence we choose /32
	rule 1 -: type - ssh  , source - custom : < enter ip of any ec2- 2 > /32 
		
											
											
											
	




-----------------------------------------------------------------------------------------------------------------------------------------
EFS - elastic file store                           # note - efs service not supported by windows ec2 , for windows fsx service used

steps - 
efs steps :-  create efs ---> add 'mount target' while creating efs
              efs-security group - add nfs rule 
              go to console --> select created efs --> attach --> copy " Using the NFS client: " command and paste in all ec2 
        
        
ec2 steps :-    install required ec2 in which we want to attach efs 
                in ec2-security group - add nfs rule
                install 'nfs' in ec2 
                create common folder for efs
                
command to check efs attach or not
# df -h 

command for installing nfs on different ec2 :-

ubuntu -       sudo apt install nfs-common

amazon linux - sudo yum -y install nfs-utils

redhat -        sudo yum -y install nfs-utils

-------------------------------------------------------------------------------------------------------------------------------------------       


Elastic load balancer:

classic load balancer - this is old one with limited functionality - 

  steps to create load balancer : 
      --> create load Balancers :
            - Create an internal load balancer - if not enabled -: means lb is public
                                                 if enabled --: means lb is not public 
                                                 
            - add list of ec2 : select here list of ec2 on which we want to distribute load
            - add security group with - http and https rule 
  
  
  
Application Load Balancer :

 steps - create load balancer :-
                - internet facing - used to access from internet /public access
                - internal - use to private access
                
                - select awailability zones in which ec2 are created           # note- for appln lb creation at least 2 az should be selected.
                - select security groups 
                
         ****   - add target group :-                                                # note for appln lb and network lb target group needed

  step for target group creation :- 
                - choose target type - instance 
                - register targets - select list of ec2 for which we want to make a group 
                
            
           
 --------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 AUTO SCALING GROUP 
                   
  asg creation steps - follow sequence while creating 
  
              1. AMI 
              2. Launch configuration or launch template -                  # in template we define os , instance type , ebs for server while auto scaling
              3. load balancer
              4. start creating asg
              5. cloud watch alarm
              6. scaling policy for asg
              
      
   Auto scaling group creation 
    step 1 :- 
        - select launch configuration 
        - select availability zone                                                         # az in which we want to add server while autoscaling
        - select Load balancer
        - *** group size -: 
                  - desired capacity                                                         # what are normal or average no of servers we want
                  - minimum capacity                                                         # min servers we want below this no of server will remove 
                  - maximum capacity                                                         # maximum servers we want beyond this no of server will add
            
            
    step 2 :- *** create policies                                                          # policies - in this we define actually when should add or remove server
    
    --> cloudwatch alarm creation --:
                              - create cloudwatch alarm --> select metric --> serch :- cpu --> ec2-by auto-scaling group --> select asg with cpu utilization metric
                              - conditions -: specifiy threshold /cpu utilization % and greater than , less than 
                              
    
    --> go to asg --> select created asg --> automatic scaling --> Dynamic scaling policies --> 
          - --> create dynamic policies --> step scaling --:
                                                      - choose cloud watch alarm 
                                                      - take a action - add :1                    # here we define add 1 server after alarm triggers
    
              
         
                
          
   Launch configuration creation 
        - Select AMI , instance type ,  keypair , security group --> create 
        
  
 ---------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 ROUTE - 53 
 
 steps -: to route traffic to single ec2
    
    step 1 :- 
      - create hosted zone for our dns 
      - change the default nameservers of dns 
                    -->  go to freenom --> service --> manage domains --> then our dns list comes --> manage domains 
                         ---> management tools --> name servers --> use custom name server --: paste here name server of created hosted zones
      
    step 2 :   
     - add record - : 
             - record name - www or subdomain names                                      # ex - www.images.prashantm.com    here "www.images" is subdomain
             - in that mention ip of ec2
             - select record type :  "A" and choose routing policies - simple
     
     
     
     
 steps to route traffic to load balancer :
        - create hosted zone for our dns 
        - add record :-
               - select record type :- A and 
               - alias - yes , and select dns name of load balancer
               - choose routing policy 
               
               
               
              
 routing policies :-  simple , failover , latency based , weighted 
 
      1 - simple routing -: 
              - create record for simple routing
              
      2 - failover routing - :
              - create health check for primary and secondory instance :
                      - want to monitor - select endpoint 
                      - ip of ec2 
                      
              - create record - 1st for primary instance - mention heath check of it , failover record type = primary
                              - 2nd for secondary instance- mention health check of secondary instance , failover record type = secondary
               
              - testing :- type domain name on browser , see primary instance web page comes or not, 
                           then stop primary instance then secondary ec2 web page comes or not
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
 
 VPC - Virtual Private Cloud
 
 steps -:
      - create vpc :- choose cidr for vpc
      - create subnets :- divide cidr among the subnets
      - create gateway - 
              - for public subnet - internet gate way , 
              - for private subnet - NAT gateway -: here we select public subnet which provide internet to private gateway
      - Route table -
            - create public route table - associate public subnet , route = 0.0.0.0/0 to internete Gateway
            - create private route table - associal private subnet , route = 0.0.0.0/0 to NAT Gateway
            
            
 -----------------------------------------------------------------------------------------------------------------------------------------------        
  
PRIVATE EC2 CREATION AND LOGGING IN IT VIA PUBLIC EC2 :-

step1 - 	create VPC 

step 2 -	create public and private subnet 

step3 - 	varil subnet la actually public and private banva

		a - create internet gateway  
		b - create nat gateway - 	hyamadhe only *public subnet add kara
					
					note - becoz apan public subnet kadun internet ghenar ani private subnet la denar ( pizza - brother - quarentine example)
	
		c - create public route table -  hyat subnet association madhe - public subnets add kara
		d- create private route table	- hyat subnet association madhe - private subnets add kara
    

steps for logging in private instance -
                                           
	- 1st login in public-ec2 
	- create file with keypair of pvt ec2 with .pem extension --------> then paste content of private server keypair ---> save it 
        - *** sudo chmod 400 <key-pair of private server >
        - enter the ssh command for private ec2


 
 ------------------------------------------------------------------------------------------------------------------------------------------------------
 
 VPC PEERING -
 
 imp note - for conncting two vpc by peering connection then these two vpc have different cidr notation 
 same cidr notation vpc will failed to peer
 
 task - Nvirginia region - vpc-1 ----> 1 public ec2
        oregon region - vpc-2 ---> 1 private ec2  
        
        we want to access private ec2 of vpc-2 on public ec2 of vpc-1 
        for that we want to make vpc peering connection of Nvirginia region - vpc-1  and oregon region - vpc-2
 
 vpc_peering steps -:
 
        step 1 :-
          - go to vpc --> peering connections --> 
          --->  create peering connection :
                  -  vpc requester -: jya vpc varti aplyala dusra vpc connect karaychay to vpc                          # in above task vpc-1 is requester
                  -  vpc accepter - : jo pan vpc aplyala access karaychay to vpc                                        # in above task vpc-2 is accepter
                  - create --> ok 
                 
        step 2 :- accept request from accepter vpc                                            # in above task vpc-2 is accepter then go to oregon region 
           - go to vpc --> peering connections --> 
            --->  create peering connection : 
                           - select created peering connection --> actions --> accept request 
 
steps for accessing private ec2 of vpc-2 on public ec2 of vpc-1 
          
          step 1 :- edit route table of of Nvirgina vpc-1 
            - go to N-virginia reqion --> route table of public ec2 --> destination :- < cidr of vpc-2 >         target -: < vpc peering connection id >
                                                                  
          step 2 :- 
            - go to oregon region ---> route tables of private ec2 --> destination :- < cidr vpc -1 >           target -: < vpc peering connection id >
	    
	    
steps for logging in private instance -
                                           
	- 1st login in public-ec2 
	- create file with keypair of pvt ec2 with .pem extension --------> then paste content of private server keypair ---> save it 
        - *** sudo chmod 400 <key-pair of private server >
        - enter the ssh command for private ec2
            
                                                         
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 VPC ENDPOINT - :
 use to communicate with aws services like s3, dynamodb , and many others without internet which reduces cost.
 
 two types of endpoint - 
 	1. gateway endpoint 
		- supports only s3 and dynamodb service , it used
		- it uses route table to connect vpc to services s3 and dynamodb
	2. interface endpoint 
		- it support upto 17 service 
		- it uses private link to connect vpc to service

steps for creating gateway endpoint :- 
	--> go to vpc --> endpoints --> create endpoint --> select aws services --> search : choose s3 with type gateway --> select our vpc --> 
	--> select private subnet - becoz from gateway endpoint we can communicate with s3 offline without NAT gateway
	--> create endpoint 
	
step to create access key and secret key 
          - go to aws console --> click on your name --> security credential --> access keys --> create new access key 
	   
	
cli steps for operating s3 from private instance without NAT gateway :- 
        - logging 1st in public instance 
	- upload key-pair.pem of private instance 
	- chmod 400 <.pem of pvt ec2 > 
	- ssh -i command for pvt instance --> then you successfully logged in pvt ec2 :
	           - run some below command to check we are able to work with s3 or not 
		   - sudo su - 
		   - *** aws configure --> enter access key and secret key                        # note aws configure is only work if 'awscli' is installed in ec2 
		   - aws s3 ls 
		   - aws s3 mb s3://<name of bucket>
		   - then upload some file in created bucket from s3 console
		   - aws s3 ls s3://<name of bucket>
		   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------		
      
 databases :- prefer the handwritten notes 
 
 aws documentation - https://aws.amazon.com/getting-started/hands-on/create-mariadb-db/
 
 steps to create rds databases :- 
    - select database engine
    - template - select  : production / dev / free tier 
    - create username and password 
    - instance configuration , select storage  - is like selecting instance type and storage 
    - availability - single / multi-az / multi-az db cluster
    - *** imp   Pulbic access : yes - to access from our pc 
      
 
 
 read replica creation steps :- 
 
      - select created database --> actions --> add reader - : use to create replica in same region in which db created 
                                            --> create cross-region read replica - : for creating across different regions
      
      
     steps to create read replica in same region of db created :-
                   -  select created database --> actions --> add reader :
		   - instance type - : choose small becoz we use for reading purpose only 
		   - connectivity - publically accessible  : yes -  to login in our pc
		   
		   
     steps to create read replica of amazon aurora in different regions :-
     
            - step 1 : - enable bin logs of db
		 A :-
		      - go to database console ---> parameter groups  --> create parameter group :
		      - give name 
		      - type : select created DB Cluster Parameter Group of created database
		 B :- 
		   - go to go to database console --> parameter groups --> select created parameter group --> search : binlog_formate --> edit value - MIXED -->save                      - go to our created database --> select our database --> modify --> DB cluster group -: select here created parameter Group --> continue 
		   
          
	 
		   
           - step 2 : - 
		 - select created database --> actions --> create cross-region read replica : 
		 - destination region - select region based on read replica facility exist in that region or not 
		        - go to selected region 
			- go databases console --> subnet group --> create subnet group --> it is simple like ec2
		- Publically accessible - : yes - for accessing it from our pc 
       
 
 
 
 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 AWS CLOUDFORMATION 
 
 steps - 
    - create jason file template with and upload to s3                                          # template - madhe aapn json formate madhe resources specify karto
    - go to cloudformation console --> create stack --> upload s3 url for template --> view designer --> click on fit window icon --> 
    --> check the specified resources design are comes or not  ----> next specify stack name  -->  done
    
 
aws cloudformation official documentation - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_EC2.html
 
 
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 IAM - IDENTITY ACCESS MANAGEMENT
 
 handson notes are written in hand wriiten 
 but please but in this sheet typing pending
 
 
 
 
 
 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 CLOUDWATCH - 
 
 Namespaces - are the basically unique name of aws services 
 ex- EC2 , EBS , VPC  are the nothing but the namespaces 
 
Metrics - are the datapoint of services/namespaces 
ex- cpuuitilization , diskreadbyte , diskwritebyte.

Dashboard - hya thikani apan specific metric sathi chart banvu shakto jyane tya metric la monitor karne simple hoel


sending appln logs to cloudwatch :-

first lanched 1 ec2 instance --> install apache on it --> 

step to send apache 2 logs to aws cloudwatch 

  	step1 - create policy and role for aws agent 
          	create policy with belowed action 
		  statement :[
			{ 
				"effect" = "allow"
				"actions" = [
					"logs:CreateLogGroup"
					"logs:CreateLogStream"
					"logs:PutLogEvents"
					"logs:DescribeLogStream"  ]
				"resource": "arn:aws:logs:*:*:*"
		    create policy with above mention actions 



		- create a role :-
			iam console --> roles --> create roles --> attach - above created policy 
								    s3 full access 

	step 3 - install aws agent and cofiguration of logs file and agent files

		- sudo yum update 
		- sudo yum install -y awslogs
		- vi /etc/awslogs/awscli.conf --> change region = we want 
		- sudo vi /etc/awslogs/awslogs.conf
			- [ /var/log/httpd/access_log/
			- file = /var/log/httpd/access_log
			- log stream_name = <mention-name>-{instance-id}
			- log stream_group = /var/log/httpd/access_log

		- sudo service awslogs start
		- sudo vi /etc/awslogs/awslogs.conf
			- [ /var/log/httpd/error_log
			- file = /var/log/httpd/error_log
			- log stream_name = <mention-name>-{instance-id}
			- log stream_group = /var/log/httpd/error_log	

	step 4 - create log filter 
		   - go to aws cloudwatch console --> logs --> select aboved access_log or error_log
		   - --> create metric filter --> get filter : enter here word which we want to find in Logs
		   - assign metric --> give Namspace and metric name --> create filter 
		   - create alarm of that filter 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

SQS - SIMPLE QUEUE SERVICE - 
Queue is for holding message , Queue is not for deliver message thats why consumer server need to poll the message 

imp terms while creating queue
   - message retention perion - ex- 1 min :- means message will remain in queue for 1 min  if server is unhealthy if cant poll this message within 1 min then it will 						   deleted from queue
   
   - Visibility Timeout - jya veli server 1 message recieve karel tya veli to message other server la unvisible specified time paryant 
   
   - Dead Letter Queue - there are some message that are not able to consume by reciever server then these message stored in Dead letter Queue
   
   
   steps to create Queue - 
   	- go to sqs console --> create queue :
	- specify message retention perion , Visibility Timeout and create queue 
	- then go inside created queue --> send and recieve message - type message --> 
	- poll message from queue 


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

ELASTIC BEANSTALK 

Step to deploy application using beanstalk

	step 1 - create application 
	   - go to beanstalk console --> create application --> give name and tag --> done
	   
	 step 2 - create environment for created application
	    - go to beanstalk console --> environments --> create new environment -: webserver - for static website
	    									     worker evironment - for complex website
	    -  --> give application name --> platform : choose the programming language --> configure more option -:
		    									   - in that specify ec2 , sg , keypair , vpc , database
	    - --> go previous from configure more configuration --> create application.
	 
	    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

OPSWORKS 

STEPS TO CREATE STACK 

    - step 1 -: create role for opswork with opsworks full access policy 
    	- go to IAM console --> Roles --> create role --> choose service to view use case : select opswork  --> next 
	- --> attach AWSOpsWorks_FullAccess policy --> next --> enter role name and create role
	
	
    - step 2 - stack creation 
    	- go to opswork console --> go to opswork stack --> add stacks --> create stack 
	

step to deploy our stack - 
	- go to opswork --> stacks --> go to created stack :
						--> instance --> start instance 
						--> deployment --> deploy an app
						
	
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
      
